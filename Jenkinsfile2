pipeline {
    agent {
        kubernetes {
            yamlFile 'k8s/k8sPodTemplate.yaml'
        }
    }
    
    stages {
        stage('Checkout') {
            steps {
                container("jenkins-agent") {
                    sh "git clone https://github.com/MadhavSake/jenkins-cloudformation-deployment-example.git"
                    checkout([$class: 'GitSCM', 
                              branches: [[name: '*/main']],
                              doGenerateSubmoduleConfigurations: false,
                              extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'k8sPodTemplate.yaml']]]],
                              submoduleCfg: [],
                              userRemoteConfigs: [[url: 'https://github.com/MadhavSake/jenkins-cloudformation-deployment-example.git']]])
                }
            }
        }
        
        stage('Check Version') {
            steps {
                ansiColor('xterm') {
                    container("jenkins-agent") {
                        sh 'aws --version'
                        sh 'aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 106036894611.dkr.ecr.eu-central-1.amazonaws.com'
                        sh 'docker run \
                                --name jenkins-blueocean \
                                --rm \
                                --detach \
                                --network jenkins \
                                --env DOCKER_HOST=unix:///var/run/docker.sock \
                                --env DOCKER_CERT_PATH=/certs/client \
                                --publish 8080:8080 \
                                --publish 50000:50000 \
                                --volume jenkins-data:/var/jenkins_home \
                                --volume jenkins-docker-certs:/certs/client:ro \
                                --volume /var/run/docker.sock:/var/run/docker.sock \
                                myjenkins-blueocean:1.1'  
                        sh 'docker ps'
                        sh 'docker images'
                        sh 'docker pull 106036894611.dkr.ecr.eu-central-1.amazonaws.com/eureka-server:latest'
                    }
                }
            }
        }

        stage('Deploy to EKS Cluster') {
            steps {
                ansiColor('xterm') {
                    container("jenkins-agent") {
                        // Apply Kubernetes manifests
                        sh 'ls'
                        sh 'kubectl apply -f jenkins-cloudformation-deployment-example/deployment.yaml'
                        sh 'kubectl create deployment nginx --image=nginx'
                        sh 'kubectl expose deployment nginx --port=80 --type=NodePort'
                    }
                }
            }
        }
    }
    
    post {
        failure {
            echo 'Pipeline failed, sending notification...'
            // Add notification steps here
        }
    }
}
